# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Achievement {
  id: ID!
  achievementID: String
  achievementName: String
  rewardID: Reward
}

input AchievementWhereUniqueInput {
  id: ID
  achievementID: String
}

input AchievementWhereInput {
  AND: [AchievementWhereInput!]
  OR: [AchievementWhereInput!]
  NOT: [AchievementWhereInput!]
  id: IDFilter
  achievementID: StringFilter
  achievementName: StringFilter
  rewardID: RewardWhereInput
}

input AchievementOrderByInput {
  id: OrderDirection
  achievementID: OrderDirection
  achievementName: OrderDirection
}

input AchievementUpdateInput {
  achievementID: String
  achievementName: String
  rewardID: RewardRelateToOneForUpdateInput
}

input RewardRelateToOneForUpdateInput {
  create: RewardCreateInput
  connect: RewardWhereUniqueInput
  disconnect: Boolean
}

input AchievementUpdateArgs {
  where: AchievementWhereUniqueInput!
  data: AchievementUpdateInput!
}

input AchievementCreateInput {
  achievementID: String
  achievementName: String
  rewardID: RewardRelateToOneForCreateInput
}

input RewardRelateToOneForCreateInput {
  create: RewardCreateInput
  connect: RewardWhereUniqueInput
}

type Reward {
  id: ID!
  rewardID: String
  rewardName: String
  reward: String
}

input RewardWhereUniqueInput {
  id: ID
  rewardID: String
}

input RewardWhereInput {
  AND: [RewardWhereInput!]
  OR: [RewardWhereInput!]
  NOT: [RewardWhereInput!]
  id: IDFilter
  rewardID: StringFilter
  rewardName: StringFilter
  reward: StringFilter
}

input RewardOrderByInput {
  id: OrderDirection
  rewardID: OrderDirection
  rewardName: OrderDirection
  reward: OrderDirection
}

input RewardUpdateInput {
  rewardID: String
  rewardName: String
  reward: String
}

input RewardUpdateArgs {
  where: RewardWhereUniqueInput!
  data: RewardUpdateInput!
}

input RewardCreateInput {
  rewardID: String
  rewardName: String
  reward: String
}

type DailyQuest {
  id: ID!
  questID: String
  questName: String
  rewardID: Reward
}

input DailyQuestWhereUniqueInput {
  id: ID
  questID: String
}

input DailyQuestWhereInput {
  AND: [DailyQuestWhereInput!]
  OR: [DailyQuestWhereInput!]
  NOT: [DailyQuestWhereInput!]
  id: IDFilter
  questID: StringFilter
  questName: StringFilter
  rewardID: RewardWhereInput
}

input DailyQuestOrderByInput {
  id: OrderDirection
  questID: OrderDirection
  questName: OrderDirection
}

input DailyQuestUpdateInput {
  questID: String
  questName: String
  rewardID: RewardRelateToOneForUpdateInput
}

input DailyQuestUpdateArgs {
  where: DailyQuestWhereUniqueInput!
  data: DailyQuestUpdateInput!
}

input DailyQuestCreateInput {
  questID: String
  questName: String
  rewardID: RewardRelateToOneForCreateInput
}

type Weapon {
  id: ID!
  weaponID: String
  weaponName: String
  attackPower: Int
  shootTimeSec: Float
}

input WeaponWhereUniqueInput {
  id: ID
  weaponID: String
}

input WeaponWhereInput {
  AND: [WeaponWhereInput!]
  OR: [WeaponWhereInput!]
  NOT: [WeaponWhereInput!]
  id: IDFilter
  weaponID: StringFilter
  weaponName: StringFilter
  attackPower: IntNullableFilter
  shootTimeSec: FloatNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input WeaponOrderByInput {
  id: OrderDirection
  weaponID: OrderDirection
  weaponName: OrderDirection
  attackPower: OrderDirection
  shootTimeSec: OrderDirection
}

input WeaponUpdateInput {
  weaponID: String
  weaponName: String
  attackPower: Int
  shootTimeSec: Float
}

input WeaponUpdateArgs {
  where: WeaponWhereUniqueInput!
  data: WeaponUpdateInput!
}

input WeaponCreateInput {
  weaponID: String
  weaponName: String
  attackPower: Int
  shootTimeSec: Float
}

type Player {
  id: ID!
  playerID: String
  playerName: String
  wallet: String
  platformPoints: Int
}

input PlayerWhereUniqueInput {
  id: ID
  playerID: String
}

input PlayerWhereInput {
  AND: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
  id: IDFilter
  playerID: StringFilter
  playerName: StringFilter
  wallet: StringFilter
  platformPoints: IntNullableFilter
}

input PlayerOrderByInput {
  id: OrderDirection
  playerID: OrderDirection
  playerName: OrderDirection
  wallet: OrderDirection
  platformPoints: OrderDirection
}

input PlayerUpdateInput {
  playerID: String
  playerName: String
  wallet: String
  platformPoints: Int
}

input PlayerUpdateArgs {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateInput!
}

input PlayerCreateInput {
  playerID: String
  playerName: String
  wallet: String
  platformPoints: Int
}

type Level {
  id: ID!
  levelID: String
  levelName: String
  scanID: Scan
  makerID: String
  gameObjectsInfo: JSON
}

input LevelWhereUniqueInput {
  id: ID
  levelID: String
}

input LevelWhereInput {
  AND: [LevelWhereInput!]
  OR: [LevelWhereInput!]
  NOT: [LevelWhereInput!]
  id: IDFilter
  levelID: StringFilter
  levelName: StringFilter
  scanID: ScanWhereInput
  makerID: StringFilter
}

input LevelOrderByInput {
  id: OrderDirection
  levelID: OrderDirection
  levelName: OrderDirection
  makerID: OrderDirection
}

input LevelUpdateInput {
  levelID: String
  levelName: String
  scanID: ScanRelateToOneForUpdateInput
  makerID: String
  gameObjectsInfo: JSON
}

input ScanRelateToOneForUpdateInput {
  create: ScanCreateInput
  connect: ScanWhereUniqueInput
  disconnect: Boolean
}

input LevelUpdateArgs {
  where: LevelWhereUniqueInput!
  data: LevelUpdateInput!
}

input LevelCreateInput {
  levelID: String
  levelName: String
  scanID: ScanRelateToOneForCreateInput
  makerID: String
  gameObjectsInfo: JSON
}

input ScanRelateToOneForCreateInput {
  create: ScanCreateInput
  connect: ScanWhereUniqueInput
}

type Scan {
  id: ID!
  scanID: String
  latitude: Float
  longitude: Float
  scan: String
}

input ScanWhereUniqueInput {
  id: ID
  scanID: String
}

input ScanWhereInput {
  AND: [ScanWhereInput!]
  OR: [ScanWhereInput!]
  NOT: [ScanWhereInput!]
  id: IDFilter
  scanID: StringFilter
  latitude: FloatNullableFilter
  longitude: FloatNullableFilter
  scan: StringFilter
}

input ScanOrderByInput {
  id: OrderDirection
  scanID: OrderDirection
  latitude: OrderDirection
  longitude: OrderDirection
  scan: OrderDirection
}

input ScanUpdateInput {
  scanID: String
  latitude: Float
  longitude: Float
  scan: String
}

input ScanUpdateArgs {
  where: ScanWhereUniqueInput!
  data: ScanUpdateInput!
}

input ScanCreateInput {
  scanID: String
  latitude: Float
  longitude: Float
  scan: String
}

type PowerUp {
  id: ID!
  powerUpID: String
  powerUpName: String
  attackBoost: Int
  defenseBoost: Int
  healthBoost: Int
  durationSec: Float
}

input PowerUpWhereUniqueInput {
  id: ID
  powerUpID: String
}

input PowerUpWhereInput {
  AND: [PowerUpWhereInput!]
  OR: [PowerUpWhereInput!]
  NOT: [PowerUpWhereInput!]
  id: IDFilter
  powerUpID: StringFilter
  powerUpName: StringFilter
  attackBoost: IntNullableFilter
  defenseBoost: IntNullableFilter
  healthBoost: IntNullableFilter
  durationSec: FloatNullableFilter
}

input PowerUpOrderByInput {
  id: OrderDirection
  powerUpID: OrderDirection
  powerUpName: OrderDirection
  attackBoost: OrderDirection
  defenseBoost: OrderDirection
  healthBoost: OrderDirection
  durationSec: OrderDirection
}

input PowerUpUpdateInput {
  powerUpID: String
  powerUpName: String
  attackBoost: Int
  defenseBoost: Int
  healthBoost: Int
  durationSec: Float
}

input PowerUpUpdateArgs {
  where: PowerUpWhereUniqueInput!
  data: PowerUpUpdateInput!
}

input PowerUpCreateInput {
  powerUpID: String
  powerUpName: String
  attackBoost: Int
  defenseBoost: Int
  healthBoost: Int
  durationSec: Float
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAchievement(data: AchievementCreateInput!): Achievement
  createAchievements(data: [AchievementCreateInput!]!): [Achievement]
  updateAchievement(where: AchievementWhereUniqueInput!, data: AchievementUpdateInput!): Achievement
  updateAchievements(data: [AchievementUpdateArgs!]!): [Achievement]
  deleteAchievement(where: AchievementWhereUniqueInput!): Achievement
  deleteAchievements(where: [AchievementWhereUniqueInput!]!): [Achievement]
  createReward(data: RewardCreateInput!): Reward
  createRewards(data: [RewardCreateInput!]!): [Reward]
  updateReward(where: RewardWhereUniqueInput!, data: RewardUpdateInput!): Reward
  updateRewards(data: [RewardUpdateArgs!]!): [Reward]
  deleteReward(where: RewardWhereUniqueInput!): Reward
  deleteRewards(where: [RewardWhereUniqueInput!]!): [Reward]
  createDailyQuest(data: DailyQuestCreateInput!): DailyQuest
  createDailyQuests(data: [DailyQuestCreateInput!]!): [DailyQuest]
  updateDailyQuest(where: DailyQuestWhereUniqueInput!, data: DailyQuestUpdateInput!): DailyQuest
  updateDailyQuests(data: [DailyQuestUpdateArgs!]!): [DailyQuest]
  deleteDailyQuest(where: DailyQuestWhereUniqueInput!): DailyQuest
  deleteDailyQuests(where: [DailyQuestWhereUniqueInput!]!): [DailyQuest]
  createWeapon(data: WeaponCreateInput!): Weapon
  createWeapons(data: [WeaponCreateInput!]!): [Weapon]
  updateWeapon(where: WeaponWhereUniqueInput!, data: WeaponUpdateInput!): Weapon
  updateWeapons(data: [WeaponUpdateArgs!]!): [Weapon]
  deleteWeapon(where: WeaponWhereUniqueInput!): Weapon
  deleteWeapons(where: [WeaponWhereUniqueInput!]!): [Weapon]
  createPlayer(data: PlayerCreateInput!): Player
  createPlayers(data: [PlayerCreateInput!]!): [Player]
  updatePlayer(where: PlayerWhereUniqueInput!, data: PlayerUpdateInput!): Player
  updatePlayers(data: [PlayerUpdateArgs!]!): [Player]
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deletePlayers(where: [PlayerWhereUniqueInput!]!): [Player]
  createLevel(data: LevelCreateInput!): Level
  createLevels(data: [LevelCreateInput!]!): [Level]
  updateLevel(where: LevelWhereUniqueInput!, data: LevelUpdateInput!): Level
  updateLevels(data: [LevelUpdateArgs!]!): [Level]
  deleteLevel(where: LevelWhereUniqueInput!): Level
  deleteLevels(where: [LevelWhereUniqueInput!]!): [Level]
  createScan(data: ScanCreateInput!): Scan
  createScans(data: [ScanCreateInput!]!): [Scan]
  updateScan(where: ScanWhereUniqueInput!, data: ScanUpdateInput!): Scan
  updateScans(data: [ScanUpdateArgs!]!): [Scan]
  deleteScan(where: ScanWhereUniqueInput!): Scan
  deleteScans(where: [ScanWhereUniqueInput!]!): [Scan]
  createPowerUp(data: PowerUpCreateInput!): PowerUp
  createPowerUps(data: [PowerUpCreateInput!]!): [PowerUp]
  updatePowerUp(where: PowerUpWhereUniqueInput!, data: PowerUpUpdateInput!): PowerUp
  updatePowerUps(data: [PowerUpUpdateArgs!]!): [PowerUp]
  deletePowerUp(where: PowerUpWhereUniqueInput!): PowerUp
  deletePowerUps(where: [PowerUpWhereUniqueInput!]!): [PowerUp]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  achievements(where: AchievementWhereInput! = {}, orderBy: [AchievementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AchievementWhereUniqueInput): [Achievement!]
  achievement(where: AchievementWhereUniqueInput!): Achievement
  achievementsCount(where: AchievementWhereInput! = {}): Int
  rewards(where: RewardWhereInput! = {}, orderBy: [RewardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RewardWhereUniqueInput): [Reward!]
  reward(where: RewardWhereUniqueInput!): Reward
  rewardsCount(where: RewardWhereInput! = {}): Int
  dailyQuests(where: DailyQuestWhereInput! = {}, orderBy: [DailyQuestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DailyQuestWhereUniqueInput): [DailyQuest!]
  dailyQuest(where: DailyQuestWhereUniqueInput!): DailyQuest
  dailyQuestsCount(where: DailyQuestWhereInput! = {}): Int
  weapons(where: WeaponWhereInput! = {}, orderBy: [WeaponOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WeaponWhereUniqueInput): [Weapon!]
  weapon(where: WeaponWhereUniqueInput!): Weapon
  weaponsCount(where: WeaponWhereInput! = {}): Int
  players(where: PlayerWhereInput! = {}, orderBy: [PlayerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlayerWhereUniqueInput): [Player!]
  player(where: PlayerWhereUniqueInput!): Player
  playersCount(where: PlayerWhereInput! = {}): Int
  levels(where: LevelWhereInput! = {}, orderBy: [LevelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LevelWhereUniqueInput): [Level!]
  level(where: LevelWhereUniqueInput!): Level
  levelsCount(where: LevelWhereInput! = {}): Int
  scans(where: ScanWhereInput! = {}, orderBy: [ScanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScanWhereUniqueInput): [Scan!]
  scan(where: ScanWhereUniqueInput!): Scan
  scansCount(where: ScanWhereInput! = {}): Int
  powerUps(where: PowerUpWhereInput! = {}, orderBy: [PowerUpOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PowerUpWhereUniqueInput): [PowerUp!]
  powerUp(where: PowerUpWhereUniqueInput!): PowerUp
  powerUpsCount(where: PowerUpWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
